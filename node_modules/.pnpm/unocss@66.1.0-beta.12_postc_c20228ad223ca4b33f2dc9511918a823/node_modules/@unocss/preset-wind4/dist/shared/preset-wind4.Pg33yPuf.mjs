import { toArray } from '@unocss/core';

function important({ important: option }) {
  if (option == null || option === false)
    return [];
  const wrapWithIs = (selector) => {
    if (selector.startsWith(":is(") && selector.endsWith(")"))
      return selector;
    if (selector.includes("::"))
      return selector.replace(/(.*?)((?:\s\*)?::.*)/, ":is($1)$2");
    return `:is(${selector})`;
  };
  return [
    option === true ? (util) => {
      util.entries.forEach((i) => {
        if (i[1] != null && !String(i[1]).endsWith("!important"))
          i[1] += " !important";
      });
    } : (util) => {
      if (!util.selector.startsWith(option))
        util.selector = `${option} ${wrapWithIs(util.selector)}`;
    }
  ];
}

function utility({ utilityResolver }) {
  const processor = (util) => {
    const resolvers = toArray(utilityResolver);
    util.entries.forEach((i) => {
      for (const resolver of resolvers) {
        resolver(i, "default", {});
      }
    });
  };
  return utilityResolver ? [processor] : [];
}

function varPrefix({ variablePrefix: prefix }) {
  const processor = (obj) => {
    obj.entries.forEach((i) => {
      i[0] = i[0].replace(/^--un-/, `--${prefix}`);
      if (typeof i[1] === "string")
        i[1] = i[1].replace(/var\(--un-/g, `var(--${prefix}`);
    });
  };
  return prefix !== "un-" ? [processor] : [];
}

function postprocessors(options) {
  return [
    important,
    varPrefix,
    utility
  ].flatMap((i) => i(options));
}

export { important as i, postprocessors as p, utility as u, varPrefix as v };
